version: "2"
services:

# ======================================================================================================================
  frontend:
    container_name: frontend
    image: frontend
    build:
      context: ../../
      dockerfile: ./docker/dev/frontend/Dockerfile
    ports:
      - "80:80"
    volumes:
      - ../../services/frontend/app:/opt/deluge/services/frontend/app
      - ../../services/frontend/test:/opt/deluge/services/frontend/test
      - ../../services/frontend/Gruntfile.js:/opt/deluge/services/frontend/Gruntfile.js
    links:
      - "backend:docker.backend"

# ======================================================================================================================
  backend:
    container_name: backend
    image: backend
    build:
      context: ../..
      dockerfile: ./docker/dev/backend/Dockerfile
    volumes:
      - ../../services/backend/src:/opt/deluge/services/backend/src
      - ../../services/backend/libs/core:/opt/deluge/services/backend/libs/core
    links:
      - "postgres:docker.postgres"
      - "router:docker.router"
      - "rabbitmq:docker.celery.broker"
      - "redis:docker.celery.backend"
      - "worker:docker.worker"


    environment:
      - PYTHONUNBUFFERED=false
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - SOCIAL_AUTH_GITHUB_OAUTH2_SECRET=${SOCIAL_AUTH_GITHUB_OAUTH2_SECRET}
      - SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET=${SOCIAL_AUTH_GOOGLE_OAUTH2_SECRET}
      - SOCIAL_AUTH_TWITTER_OAUTH1_SECRET=${SOCIAL_AUTH_TWITTER_OAUTH1_SECRET}
      - SOCIAL_AUTH_TWITTER_OAUTH1_KEY=${SOCIAL_AUTH_TWITTER_OAUTH1_KEY}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - COINBASE_API_KEY=${COINBASE_API_KEY}
      - COINBASE_API_SECRET=${COINBASE_API_SECRET}
      - WHOAMI=DJANGO

# ======================================================================================================================
  router:
    container_name: router
    image: router
    build:
      context: ../..
      dockerfile: ./docker/dev/router/Dockerfile
    volumes:
      - ../../services/router:/opt/deluge/services/router
    ports:
      - "8080:8080"

# ======================================================================================================================
  postgres:
    container_name: postgres
    image: postgres
    volumes:
      - "dbdata:/var/lib/postgresql/data"
    ports:
      - "5432:5432"

# ======================================================================================================================
  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq

# ======================================================================================================================
  worker:
    container_name: worker
    image: worker
    build:
      context: ../..
      dockerfile: ./docker/dev/celery/Dockerfile
    links:
      - "rabbitmq:docker.celery.broker"
      - "postgres:docker.postgres"
      - "router:docker.router"
      - "redis:docker.celery.backend"
    environment:
      - PYTHONUNBUFFERED=false
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - CELERY_TEST=True
      - WHOAMI=CELERY
    volumes:
      - ../../services/backend/src:/opt/deluge/services/backend/src
      - ../../services/backend/libs/core:/opt/deluge/services/backend/libs/core
    command: ["-A" , "absortium.celery.app", "worker", "--loglevel=info", "-c", "3"]

# ======================================================================================================================
  flower:
    container_name: flower
    image: worker
    build:
      context: ../..
      dockerfile: ./docker/dev/celery/Dockerfile
    links:
      - "rabbitmq:docker.celery.broker"
    ports:
      - "5555:5555"
    environment:
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
    volumes:
      - ../../services/backend/src:/opt/deluge/services/backend/src
      - ../../services/backend/libs/core:/opt/deluge/services/backend/libs/core
    command: ["flower", "-A" , "absortium.celery.app", "--address=0.0.0.0", "-=port=5555", "--broker=amqp://guest@docker.celery.broker"]


# ======================================================================================================================

  redis:
    container_name: redis
    image: redis
    ports:
      - "6379:6379"

# ======================================================================================================================
  data:
    restart: always
    container_name: data
    image: postgres:latest
    volumes:
      - /var/lib/postgresql
    command: "true"

# ======================================================================================================================
  datadog:
    container_name: datadog
    image: datadog/docker-dd-agent
    environment:
     - API_KEY=${DATADOG_API_KEY}
     - DOGSTATSD_ONLY=true
    volumes:
     - /var/run/docker.sock:/var/run/docker.sock
     - /proc:/host/proc:ro
     - /sys/fs/cgroup:/host/sys/fs/cgroup:ro}


volumes:
  dbdata:
    driver: local