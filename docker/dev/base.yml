version: "2"
services:

# ======================================================================================================================
  frontend:
    container_name: frontend
    image: frontend
    build:
      context: ../../
      dockerfile: ./docker/dev/frontend/Dockerfile
    ports:
      - "80:80"
    volumes:
      - ../../services/frontend/app:/opt/deluge/services/frontend/app
      - ../../services/frontend/internals:/opt/deluge/services/frontend/internals
      - ../../services/frontend/server:/opt/deluge/services/frontend/server
      - ../../services/frontend/package.json:/opt/deluge/services/frontend/package.json
    links:
      - "m-backend:docker.backend"

# ======================================================================================================================
  # Base  backend service which include the parameteres that backend and celery worker share
  base-backend:
    image: base-backend
    build:
      context: ../..
      dockerfile: ./docker/dev/base-backend/Dockerfile
    volumes:
      - ../../services/backend/src:/opt/deluge/services/backend/src
      - ../../services/backend/libs/:/opt/deluge/services/backend/libs/
    environment:
      - PYTHONUNBUFFERED=false
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - ETH_NOTIFICATION_TOKEN=${ETH_NOTIFICATION_TOKEN}
      - BTC_NOTIFICATION_TOKEN=${BTC_NOTIFICATION_TOKEN}

  # Backend DJANGO service
  m-backend:
    extends: base-backend
    container_name: m-backend
    environment:
      - AUTH0_SECRET_KEY=${AUTH0_SECRET_KEY}
      - AUTH0_API_KEY=${AUTH0_API_KEY}
      - WHOAMI=DJANGO
    entrypoint: ["python3", "-u", "manage.py"]
    command: ["runserver" , "0.0.0.0:3000"]

  # Celery worker
  w-backend:
    extends: base-backend
    container_name: w-backend
    environment:
      - COINBASE_API_KEY=${COINBASE_API_KEY}
      - COINBASE_API_SECRET=${COINBASE_API_SECRET}
      - ETHWALLET_API_KEY=${ETHWALLET_API_KEY}
      - ETHWALLET_API_SECRET=${ETHWALLET_API_SECRET}
      - WHOAMI=CELERY
    entrypoint: ["celery"]
    command: ["-A" , "absortium.celery.app", "worker", "--loglevel=info", "-c", "3"]

# ======================================================================================================================
  base-ethwallet:
    image: base-ethwallet
    build:
      context: ../..
      dockerfile: ./docker/dev/base-ethwallet/Dockerfile
    environment:
      - PYTHONUNBUFFERED=false
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - AUTH=False
    volumes:
      - ../../services/backend/libs/core:/opt/deluge/services/backend/libs/core
      - ../../services/ethwallet/:/opt/deluge/services/ethwallet/

  # Ethereum wallet backend DJANGO service
  m-ethwallet:
    extends: base-ethwallet
    container_name: m-ethwallet
    environment:
      - WHOAMI=DJANGO
    entrypoint: ["python3", "-u", "manage.py"]
    command: ["runserver" , "0.0.0.0:3000"]

  # Ethereum wallet celery worker
  w-ethwallet:
    extends: base-ethwallet
    container_name: w-ethwallet
    environment:
      - WHOAMI=CELERY
    entrypoint: ["celery"]
    command: ["-A" , "ethwallet.celery.app", "worker", "--loglevel=info", "-c", "3"]

# ======================================================================================================================
  router:
    container_name: router
    image: router
    build:
      context: ../..
      dockerfile: ./docker/dev/router/Dockerfile
    volumes:
      - ../../services/router:/opt/deluge/services/router
    ports:
      - "8080:8080"

# ======================================================================================================================
  ethnode:
    container_name: ethnode
    image: ethnode
    build:
      context: ../..
      dockerfile: ./docker/dev/ethnode/Dockerfile

# ======================================================================================================================
  postgres:
    container_name: postgres
    image: postgres
    volumes:
      - "dbdata:/var/lib/postgresql/data"

# ======================================================================================================================
  redis:
    container_name: redis
    image: redis

# ======================================================================================================================
  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq

# ==================================================================================================================== #
#                                                    RUBBISH                                                           #
# ==================================================================================================================== #
  flower:
    container_name: flower
    image: worker
    build:
      context: ../..
      dockerfile: ./docker/dev/celery/Dockerfile
    links:
      - "rabbitmq:docker.celery.broker"
    ports:
      - "5555:5555"
    environment:
      - DJANGO_SECRET_KEY=${DJANGO_SECRET_KEY}
    volumes:
      - ../../services/backend/src:/opt/deluge/services/backend/src
      - ../../services/backend/libs/core:/opt/deluge/services/backend/libs/core
    command: ["flower", "-A" , "absortium.celery.app", "--address=0.0.0.0", "--port=5555", "--broker=amqp://guest@docker.celery.broker"]

# ======================================================================================================================
  datadog:
    container_name: datadog
    image: datadog/docker-dd-agent
    environment:
     - API_KEY=${DATADOG_API_KEY}
     - DOGSTATSD_ONLY=true
    volumes:
     - /var/run/docker.sock:/var/run/docker.sock
     - /proc:/host/proc:ro
     - /sys/fs/cgroup:/host/sys/fs/cgroup:ro}

volumes:
  dbdata:
    driver: local